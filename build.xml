<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<project name="OSMembrane" default="binary">
	
	<import file="build-common.xml" />

	<property name="src.dir" value="${basedir}/src" />
	<property name="3rdparty.dir" value="${basedir}/3rdparty" />
	<property name="resources.dir" value="${basedir}/resources" />
	<property name="build.dir" value="${basedir}/build" />
	<property name="dist.dir" value="${basedir}/dist" />

	<property name="binary-zip-basedir" value="${build.dir}/binary-zip" />
	
	<fileset dir="lib/runtime" id="runtime-classpath-files">
		<include name="*.jar" />
	</fileset>
	
	<fileset dir="lib/test" id="test-classpath-files">
		<include name="*.jar" />
	</fileset>

	
	<property name="version.properties.path" value="${build.dir}/bin/de/osmembrane/resources/version.properties" />
	
	<target name="init">
		<mkdir dir="${build.dir}" />
	</target>

	<target name="compile" depends="init" description="compile main sources">
		<mkdir dir="${build.dir}/bin"/>
		<javac destdir="${build.dir}/bin">
			<src>
				<path path="${src.dir}" />
				<path path="${3rdparty.dir}" />
				<path path="${resources.dir}" />
			</src>
			<classpath>
				<fileset refid="runtime-classpath-files" />
			</classpath>
		</javac>
		<copy todir="${build.dir}/bin">
			<fileset dir="${src.dir}">
				<exclude name="**/*.java" />
				<exclude name="LICENSE.txt" />
			</fileset>
			<fileset dir="${3rdparty.dir}">
				<exclude name="**/*.java" />
				<exclude name="LICENSE.txt" />
			</fileset>
			<fileset dir="${resources.dir}">
				<include name="**/*"/>
			</fileset>
		</copy>
	</target>
	
   	<target name="jar" depends="compile, update_constants_revision" description="build an executable jar">
        <jar destfile="${build.dir}/OSMembrane.jar" manifest="MANIFEST.fatjar">
            <zipfileset src="jar-in-jar-loader.zip"/>
            <fileset dir="${build.dir}/bin"/>
            <zipfileset dir="lib/runtime" includes="*.jar"/>
        </jar>
	</target>
	
	<target name="compile_tests" depends="compile">
		<mkdir dir="${build.dir}/bin-tests"/>
		<javac srcdir="junit"
         destdir="${build.dir}/bin-tests"
         debug="on">
			<classpath>
				<path path="${build.dir}/bin" />
				<fileset refid="runtime-classpath-files" />
				<fileset refid="test-classpath-files" />
			</classpath>
		</javac>
	</target>
	
	<target name="test" depends="compile, compile_tests" description="run unit tests">
		<mkdir dir="${build.dir}/test-reports" />
		<junit printsummary="on" showoutput="true" fork="on">
			<formatter type="plain" />
			<formatter type="xml" />
			<batchtest todir="${build.dir}/test-reports">
				<fileset dir="${build.dir}/bin-tests">
					<include name="**/*Test.class"/>
					<exclude name="**/*$*"/>
				</fileset>
			</batchtest>
			<classpath>
				<path path="${build.dir}/bin-tests" />
				<path path="${build.dir}/bin" />
				<fileset refid="runtime-classpath-files" />
				<fileset refid="test-classpath-files" />
			</classpath>
		</junit>
	</target>
	
	<target name="source-zip" depends="init, _get-version">
		<delete dir="${build.dir}/source-zip" />
		<svn>
			<export srcpath="${basedir}" destpath="${build.dir}/source-zip" />
		</svn>
		<zip destfile="${build.dir}/OSMembrane_${project.version.id}-src.zip">
			<fileset dir="${build.dir}/source-zip" />
		</zip>
	</target>
	
	<target name="binary-zip" depends="init,_get-version,jar">
		<mkdir dir="${binary-zip-basedir}" />
		<mkdir dir="${binary-zip-basedir}/resources/xml"/>
		<mkdir dir="${binary-zip-basedir}/resources/pdf"/>
		<copy file="manual/manual.pdf" tofile="${binary-zip-basedir}/resources/pdf/manual.pdf"/>
		<copy file="LICENSE.txt" tofile="${binary-zip-basedir}/LICENSE.txt"/>
		<copy file="${build.dir}/OSMembrane.jar" tofile="${binary-zip-basedir}/OSMembrane.jar"/>
		<zip destfile="${build.dir}/OSMembrane_${project.version.id}-bin.zip">
			<fileset dir="${binary-zip-basedir}" />
		</zip>
	</target>
	
	<target name="javadoc" depends="init,_get-version">
		<mkdir dir="${build.dir}/javadoc" />
		<javadoc destdir="${build.dir}/javadoc" 
			windowtitle="OSMembrane API documentation (${project.version.id})" 
			defaultexcludes="true" use="true" 
			noqualifier="java.lang:java.util:javax.swing:java.awt"
			>
			<packageset dir="src" />
			<packageset dir="3rdparty" />
			<classpath>
				<fileset refid="runtime-classpath-files"/>
			</classpath>
		</javadoc>
	</target>
	
	<target name="javadoc-zip" depends="init,_get-version,javadoc">
		<zip destfile="${build.dir}/OSMembrane_${project.version.id}-javadoc.zip" 
			basedir="${build.dir}/javadoc" />
	</target>
	
	<target name="binary" depends="binary-zip" >
		<mkdir dir="${dist.dir}" />
		<copy todir="${dist.dir}/binary">
			<fileset dir="${binary-zip-basedir}" />
		</copy>
	</target>
		
	<target name="dist" depends="init,_get-version,source-zip,binary-zip,javadoc-zip" description="create a distribution">
		<mkdir dir="${dist.dir}" />
		<copy todir="${dist.dir}">
			<fileset dir="${build.dir}" includes="OSMembrane_${project.version.id}*.zip" />
		</copy>
	</target>
	
	<target name="clean" description="remove generated files">
		<delete file="${version.properties.path}" />
		<delete dir="${build.dir}" />
		<delete dir="${dist.dir}" />
	</target>
	
</project>
