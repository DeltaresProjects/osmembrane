<?xml version="1.0" encoding="utf-8"?>
<XMLOsmosisStructure xmlns="http://osmembrane.de/model/xml"
	formatVersion="1.0.0" osmosisVersion="0.37">

	<functionGroup id="input-output" friendlyName="Input &amp; Output" color="255, 239, 0">
		<function id="read" friendlyName="Read Entity Tasks">
			<task name="read-xml" friendlyName="Read OSM XML" shortName="rx">
				<description lang="en">
					<value>Reads the current contents of an OSM XML file.</value>
				</description>
				<outputPipe index="0" count="single" type="entity">
					<description lang="en">
						<value>
							Produces an entity stream.
        </value>
					</description>
				</outputPipe>
				<parameter name="file" type="filename" defaultParameter="true"
					required="true" defaultValue="dump.osm">
					<description lang="en">
						<value>
							The name of the osm file to be read, "-" means STDIN.
						</value>
					</description>
				</parameter>
				<parameter name="enableDateParsing" type="boolean"
					defaultValue="true" booleanEncoding="yesno">
					<description lang="en">
						<value>
							If set to yes, the dates in the osm xml file will be
							parsed,
							otherwise all dates will be set to a
							single time
							approximately equal to application startup. Setting this to
							no is
							only useful if
							the input file doesn't contain timestamps. It used
							to improve
							performance but date parsing
							now incurs low overhead.
						</value>
					</description>
				</parameter>
				<parameter name="compressionMethod" type="enum"
					defaultValue="none">
					<description lang="en">
						<value>
							Specifies the compression method that has been used to
							compress the file.
							In most cases this isn't
							required because the
							compression method will be automatically determined
							from the file
							name
							(*.gz=gzip, *.bz2=bzip2).
        </value>
					</description>
					<enumValue value="none" friendlyName="None" />
					<enumValue value="gzip" />
					<enumValue value="bzip2" />
				</parameter>
			</task>

			<task name="fast-read-xml" friendlyName="Read OSM XML using STAX">
				<description lang="en">
					<value>
						As per the --read-xml task but using a STAX XML parser
						instead of
						SAX for improved performance.
						This has undergone solid
						testing and should be reliable but all xml
						processing tasks have
						not yet been re-written to use the new
						implementation thus is not
						the default yet.
      </value>
				</description>
				<outputPipe index="0" count="single" type="entity">
					<description lang="en">
						<value>
							Produces an entity stream.
        </value>
					</description>
				</outputPipe>
				<parameter name="file" type="filename" defaultParameter="true"
					required="true" defaultValue="dump.osm">
					<description lang="en">
						<value>
							The name of the osm file to be read, "-" means STDIN.
						</value>
					</description>
				</parameter>
				<parameter name="enableDateParsing" type="boolean"
					defaultValue="true" booleanEncoding="yesno">
					<description lang="en">
						<value>
							If set to yes, the dates in the osm xml file will be
							parsed,
							otherwise all dates will be set to a
							single time
							approximately equal to application startup. Setting this to
							no is
							only useful if
							the input file doesn't contain timestamps. It used
							to improve
							performance but date parsing
							now incurs low overhead.
						</value>
					</description>
				</parameter>
				<parameter name="compressionMethod" type="enum"
					defaultValue="none">
					<description lang="en">
						<value>
							Specifies the compression method that has been used to
							compress the file.
							In most cases this isn't
							required because the
							compression method will be automatically determined
							from the file
							name
							(*.gz=gzip, *.bz2=bzip2).
        </value>
					</description>
					<enumValue value="none" friendlyName="None" />
					<enumValue value="gzip" />
					<enumValue value="bzip2" />
				</parameter>
			</task>

			<task name="read-apidb" shortName="rd">
				<description lang="en">
					<value>
						Reads the contents of an API database at a specific point in
						time.
					</value>
				</description>
				<outputPipe count="single" index="0" type="entity" />
				<parameter name="authFile" defaultParameter="false"
					required="false" type="filename">
					<description lang="en">
						<value>
							The name of the file containing database login credentials.
						</value>
					</description>
				</parameter>
				<parameter name="host" defaultParameter="false" required="false"
					defaultValue="localhost" type="string">
					<description lang="en">
						<value>
							The database host server.
        </value>
					</description>
				</parameter>
				<parameter name="database" defaultParameter="false"
					required="false" defaultValue="osm" type="string">
					<description lang="en">
						<value>
							The database instance.
        </value>
					</description>
				</parameter>
				<parameter name="user" defaultParameter="false" required="false"
					defaultValue="osm" type="string">
					<description lang="en">
						<value>
							The database user name.
        </value>
					</description>
				</parameter>
				<parameter name="password" defaultParameter="false"
					required="false" type="string">
					<description lang="en">
						<value>
							The database password.
        </value>
					</description>
				</parameter>
				<parameter name="dbType" defaultParameter="false"
					required="false" type="enum">
					<description lang="en">
						<value>
							The type of database being used.
        </value>
					</description>
					<enumValue value="postgresql" />
					<enumValue value="mysql" />
				</parameter>
				<parameter name="validateSchemaVersion" defaultParameter="false"
					required="false" defaultValue="true" type="boolean"
					booleanEncoding="yesno">
					<description lang="en">
						<value>
							If yes is specified, the task will validate the current
							schema
							version before accessing the database.
        </value>
					</description>
				</parameter>
				<parameter name="allowIncorrectSchemaVersion"
					defaultParameter="false" required="false" defaultValue="true" type="boolean"
					booleanEncoding="yesno">
					<description lang="en">
						<value>
							If validateSchemaVersion is yes, this option controls the
							result of
							a schema version check failure. If this option is yes, a
							warning
							is displayed and execution continues. If this option is
							no, an
							error is displayed and the program aborts.
        </value>
					</description>
				</parameter>
				<parameter name="readAllUsers" defaultParameter="false"
					required="false" defaultValue="false" type="boolean"
					booleanEncoding="yesno">
					<description lang="en">
						<value>
							If set to yes, the user public edit flag will be ignored
							and user
							information will be attached to every entity.
        </value>
					</description>
				</parameter>
				<parameter name="snapshotInstant" defaultParameter="false"
					required="false" type="instant">
					<description lang="en">
						<value>
							Defines the point in time for which to produce a data
							snapshot. Format
							is format is "yyyy-MM-dd_HH:mm:ss".
        </value>
					</description>
				</parameter>
			</task>

			<task name="read-apidb-current" shortName="rdcur">
				<description lang="en">
					<value>
						Reads the current contents of an API database. Note that
						this task
						cannot be used as a starting point for replication
						because it does
						not produce a consistent snapshot.
    </value>
				</description>
				<outputPipe count="single" index="0" type="entity" />
				<parameter name="authFile" defaultParameter="false"
					required="false" type="filename">
					<description lang="en">
						<value>
							The name of the file containing database login credentials.
						</value>
					</description>
				</parameter>
				<parameter name="host" defaultParameter="false" required="false"
					defaultValue="localhost" type="string">
					<description lang="en">
						<value>
							The database host server.
      </value>
					</description>
				</parameter>
				<parameter name="database" defaultParameter="false"
					required="false" defaultValue="osm" type="string">
					<description lang="en">
						<value>
							The database instance.
      </value>
					</description>
				</parameter>
				<parameter name="user" defaultParameter="false" required="false"
					defaultValue="osm" type="string">
					<description lang="en">
						<value>
							The database user name.
      </value>
					</description>
				</parameter>
				<parameter name="password" defaultParameter="false"
					required="false" type="string">
					<description lang="en">
						<value>
							The database password.
      </value>
					</description>
				</parameter>
				<parameter name="dbType" defaultParameter="false"
					required="false" type="enum">
					<description lang="en">
						<value>
							The type of database being used.
      </value>
					</description>
					<enumValue value="postgresql" />
					<enumValue value="mysql" />
				</parameter>
				<parameter name="validateSchemaVersion" defaultParameter="false"
					required="false" defaultValue="true" type="boolean"
					booleanEncoding="yesno">
					<description lang="en">
						<value>
							If yes is specified, the task will validate the current
							schema
							version before accessing the database.
      </value>
					</description>
				</parameter>
				<parameter name="allowIncorrectSchemaVersion"
					defaultParameter="false" required="false" defaultValue="true" type="boolean"
					booleanEncoding="yesno">
					<description lang="en">
						<value>
							If validateSchemaVersion is yes, this option controls the
							result of
							a schema version check failure. If this option is yes, a
							warning
							is displayed and execution continues. If this option is
							no, an
							error is displayed and the program aborts.
      </value>
					</description>
				</parameter>
				<parameter name="readAllUsers" defaultParameter="false"
					required="false" defaultValue="false" type="boolean"
					booleanEncoding="yesno">
					<description lang="en">
						<value>
							If set to yes, the user public edit flag will be ignored
							and user
							information will be attached to every entity.
      </value>
					</description>
				</parameter>
			</task>

			<task name="read-pbf" shortName="rb">
				<description lang="en">
					<value>
						Reads the current contents of an OSM binary file.
      </value>
				</description>
				<outputPipe index="0" count="single" type="entity" />
				<parameter name="file" defaultParameter="true"
					defaultValue="dump.osm.pbf" type="filename">
					<description lang="en">
						<value>
							The name of the file to be read.
        </value>
					</description>
				</parameter>
			</task>

			<task name="read-api" shortName="ra">
				<description lang="en">
					<value>
						Retrieves the contents of a bounding box from the API. This
						is subject to
						the bounding box size limitations imposed by the API.
					</value>
				</description>
				<outputPipe index="0" count="single" type="entity" />
				<parameter name="url" type="uri" required="true"
					defaultValue="http://www.openstreetmap.org/api/0.6">
					<description lang="en">
						<value>
							The url of the API server.
        </value>
					</description>
				</parameter>
				<parameter name="bbox" type="bbox" required="true" />
			</task><description lang="en">
				<value>Reads input sources and produces an entity stream.</value></description>
			</function>

		<function id="read-change" friendlyName="Read Change Tasks">
			<task name="read-xml-change" friendlyName="Read OSM XML change file"
				shortName="rxc">
				<description lang="en">
					<value>Reads the contents of an OSM XML change file.</value>
				</description>
				<outputPipe index="0" count="single" type="change">
					<description lang="en">
						<value>
							The name of the osm change file to be read, "-" means
							STDIN.
        </value>
					</description>
				</outputPipe>
				<parameter name="file" type="filename" defaultParameter="true"
					required="true" defaultValue="change.osc">
					<description lang="en">
						<value>
							The name of the osm file to be read, "-" means STDIN.
						</value>
					</description>
				</parameter>
				<parameter name="enableDateParsing" type="boolean"
					defaultValue="true" booleanEncoding="yesno">
					<description lang="en">
						<value>
							If set to yes, the dates in the osm xml file will be
							parsed,
							otherwise all dates will be set to a
							single time
							approximately equal to application startup. Setting this to
							no is
							only useful if
							the input file doesn't contain timestamps. It used
							to improve
							performance but date parsing
							now incurs low overhead.
						</value>
					</description>
				</parameter>
				<parameter name="compressionMethod" type="enum"
					defaultValue="none">
					<description lang="en">
						<value>
							Specifies the compression method that has been used to
							compress the file.
							In most cases this isn't
							required because the
							compression method will be automatically determined
							from the file
							name
							(*.gz=gzip, *.bz2=bzip2).
        </value>
					</description>
					<enumValue value="none" friendlyName="None" />
					<enumValue value="gzip" />
					<enumValue value="bzip2" />
				</parameter>
			</task>

			<task name="read-apidb-change" shortName="rdc">
				<description lang="en">
					<value>
						Reads the changes for a specific time interval from an API
						database.
					</value>
				</description>
				<outputPipe count="single" index="0" type="change" />
				<parameter name="authFile" defaultParameter="false"
					required="false" type="filename">
					<description lang="en">
						<value>
							The name of the file containing database login credentials.
						</value>
					</description>
				</parameter>
				<parameter name="host" defaultParameter="false" required="false"
					defaultValue="localhost" type="string">
					<description lang="en">
						<value>
							The database host server.
        </value>
					</description>
				</parameter>
				<parameter name="database" defaultParameter="false"
					required="false" defaultValue="osm" type="string">
					<description lang="en">
						<value>
							The database instance.
        </value>
					</description>
				</parameter>
				<parameter name="user" defaultParameter="false" required="false"
					defaultValue="osm" type="string">
					<description lang="en">
						<value>
							The database user name.
        </value>
					</description>
				</parameter>
				<parameter name="password" defaultParameter="false"
					required="false" type="string">
					<description lang="en">
						<value>
							The database password.
        </value>
					</description>
				</parameter>
				<parameter name="dbType" defaultParameter="false"
					required="false" type="enum">
					<description lang="en">
						<value>
							The type of database being used.
        </value>
					</description>
					<enumValue value="postgresql" />
					<enumValue value="mysql" />
				</parameter>
				<parameter name="validateSchemaVersion" defaultParameter="false"
					required="false" defaultValue="true" type="boolean"
					booleanEncoding="yesno">
					<description lang="en">
						<value>
							If yes is specified, the task will validate the current
							schema
							version before accessing the database.
        </value>
					</description>
				</parameter>
				<parameter name="allowIncorrectSchemaVersion"
					defaultParameter="false" required="false" defaultValue="true" type="boolean"
					booleanEncoding="yesno">
					<description lang="en">
						<value>
							If validateSchemaVersion is yes, this option controls the
							result of
							a schema version check failure. If this option is yes, a
							warning
							is displayed and execution continues. If this option is
							no, an
							error is displayed and the program aborts.
        </value>
					</description>
				</parameter>
				<parameter name="readAllUsers" defaultParameter="false"
					required="false" defaultValue="false" type="boolean"
					booleanEncoding="yesno">
					<description lang="en">
						<value>
							If set to yes, the user public edit flag will be ignored
							and user
							information will be attached to every entity.
        </value>
					</description>
				</parameter>
				<parameter name="intervalBegin" defaultParameter="false"
					required="false" type="instant">
					<description lang="en">
						<value>
							Defines the beginning of the interval for which to produce
							a change set.
							Format is "yyyy-MM-dd_HH:mm:ss".
        </value>
					</description>
				</parameter>
				<parameter name="intervalEnd" defaultParameter="false"
					required="false" type="instant">
					<description lang="en">
						<value>
							Defines the beginning of the interval for which to produce
							a change set.
							Format is "yyyy-MM-dd_HH:mm:ss".
        </value>
					</description>
				</parameter>
				<parameter name="readFullHistory" defaultParameter="false"
					required="false" defaultValue="false" type="boolean"
					booleanEncoding="yesno">
					<description lang="en">
						<value>
							If set to yes, complete history for the specified time
							interval is
							produced instead of a single change per entity
							modified in that
							interval. This is not useful for standard
							changesets, it is
							useful if a database replica with full history
							is being produced.
							Change files produced using this option will
							likely not be able
							to be processed by most tools supporting the
							*.osc file format.
						</value>
					</description>
				</parameter>
			</task>
			<description lang="en">
				<value>Reads input sources and produces a change stream.</value></description>
		</function>

		<function id="read-dataset" friendlyName="Read Dataset Tasks">
			<task name="read-pgsql" shortName="rp">
				<description lang="en">
					<value>
						Reads the contents of a PostGIS database at a specific point
						in time.
					</value>
				</description>
				<outputPipe count="single" index="0" type="dataset" />
				<parameter name="authFile" defaultParameter="false"
					required="false" type="filename">
					<description lang="en">
						<value>
							The name of the file containing database login credentials.
						</value>
					</description>
				</parameter>
				<parameter name="host" defaultParameter="false" required="false"
					defaultValue="localhost" type="string">
					<description lang="en">
						<value>
							The database host server.
        </value>
					</description>
				</parameter>
				<parameter name="database" defaultParameter="false"
					required="false" defaultValue="osm" type="string">
					<description lang="en">
						<value>
							The database instance.
        </value>
					</description>
				</parameter>
				<parameter name="user" defaultParameter="false" required="false"
					defaultValue="osm" type="string">
					<description lang="en">
						<value>
							The database user name.
        </value>
					</description>
				</parameter>
				<parameter name="password" defaultParameter="false"
					required="false" type="string">
					<description lang="en">
						<value>
							The database password.
        </value>
					</description>
				</parameter>
				<parameter name="validateSchemaVersion" defaultParameter="false"
					required="false" defaultValue="true" type="boolean"
					booleanEncoding="yesno">
					<description lang="en">
						<value>
							If yes is specified, the task will validate the current
							schema
							version before accessing the database.
        </value>
					</description>
				</parameter>
				<parameter name="allowIncorrectSchemaVersion"
					defaultParameter="false" required="false" defaultValue="true" type="boolean"
					booleanEncoding="yesno">
					<description lang="en">
						<value>
							If validateSchemaVersion is yes, this option controls the
							result of
							a schema version check failure. If this option is yes, a
							warning
							is displayed and execution continues. If this option is
							no, an
							error is displayed and the program aborts.
        </value>
					</description>
				</parameter>
			</task>
			<description lang="en">
				<value>Reads input sources and produces a dataset stream.</value></description>
		</function>

		<function id="write" friendlyName="Write Entity Tasks">
			<task name="write-xml" friendlyName="Write OSM XML" shortName="wx">
				<description lang="en">
					<value>Writes data to an OSM XML file.</value>
				</description>
				<inputPipe index="0" count="single" type="entity">
					<description lang="en">
						<value>
							Consumes an entity stream.
        </value>
					</description>
				</inputPipe>
				<parameter name="file" type="filename" defaultParameter="true"
					required="true" defaultValue="dump.osm">
					<description lang="en">
						<value>
							The name of the osm file to be written, "-" means STDOUT.
						</value>
					</description>
				</parameter>
				<parameter name="compressionMethod" type="enum"
					defaultValue="none">
					<description lang="en">
						<value>
							Specifies the compression method that has been used to
							compress the file.
							In most cases this isn't
							required because the
							compression method will be automatically determined
							from the file
							name
							(*.gz=gzip, *.bz2=bzip2).
        </value>
					</description>
					<enumValue value="none" friendlyName="None" />
					<enumValue value="gzip" />
					<enumValue value="bzip2" />
				</parameter>
			</task>

			<task name="write-apidb" shortName="wd">
				<description lang="en">
					<value>
						Populates an empty API database.
      </value>
				</description>
				<inputPipe count="single" index="0" type="entity" />
				<parameter name="authFile" defaultParameter="false"
					required="false" type="filename">
					<description lang="en">
						<value>
							The name of the file containing database login credentials.
						</value>
					</description>
				</parameter>
				<parameter name="host" defaultParameter="false" required="false"
					defaultValue="localhost" type="string">
					<description lang="en">
						<value>
							The database host server.
        </value>
					</description>
				</parameter>
				<parameter name="database" defaultParameter="false"
					required="false" defaultValue="osm" type="string">
					<description lang="en">
						<value>
							The database instance.
        </value>
					</description>
				</parameter>
				<parameter name="user" defaultParameter="false" required="false"
					defaultValue="osm" type="string">
					<description lang="en">
						<value>
							The database user name.
        </value>
					</description>
				</parameter>
				<parameter name="password" defaultParameter="false"
					required="false" type="string">
					<description lang="en">
						<value>
							The database password.
        </value>
					</description>
				</parameter>
				<parameter name="dbType" defaultParameter="false"
					required="false" type="enum">
					<description lang="en">
						<value>
							The type of database being used.
        </value>
					</description>
					<enumValue value="postgresql" />
					<enumValue value="mysql" />
				</parameter>
				<parameter name="validateSchemaVersion" defaultParameter="false"
					required="false" defaultValue="true" type="boolean"
					booleanEncoding="yesno">
					<description lang="en">
						<value>
							If yes is specified, the task will validate the current
							schema
							version before accessing the database.
        </value>
					</description>
				</parameter>
				<parameter name="allowIncorrectSchemaVersion"
					defaultParameter="false" required="false" defaultValue="true" type="boolean"
					booleanEncoding="yesno">
					<description lang="en">
						<value>
							If validateSchemaVersion is yes, this option controls the
							result of
							a schema version check failure. If this option is yes, a
							warning
							is displayed and execution continues. If this option is
							no, an
							error is displayed and the program aborts.
        </value>
					</description>
				</parameter>
				<parameter name="lockTables" defaultParameter="false"
					required="false" defaultValue="true" type="boolean"
					booleanEncoding="yesno">
					<description lang="en">
						<value>
							If yes is specified, tables will be locked during the
							import. This
							provides measurable performance improvements but
							prevents
							concurrent queries.
        </value>
					</description>
				</parameter>
				<parameter name="populateCurrentTables" defaultParameter="false"
					required="false" defaultValue="true" type="boolean"
					booleanEncoding="yesno">
					<description lang="en">
						<value>
							If yes is specified, the current tables will be populated
							after the
							initial history table population. If only history tables
							are
							required, this reduces the import time by approximately 80%.
						</value>
					</description>
				</parameter>
			</task>

			<task name="write-pbf" shortName="wb">
				<description lang="en">
					<value>
						Writes data to an OSM binary file.
      </value>
				</description>
				<inputPipe index="0" count="single" type="entity" />
				<parameter name="file" defaultParameter="true"
					defaultValue="dump.osm.pbf" type="filename">
					<description lang="en">
						<value>
							The name of the file to be written.
        </value>
					</description>
				</parameter>
				<parameter name="batchlimit" required="false" type="int"
					defaultValue="8000" defaultParameter="false">
					<description lang="en">
						<value>
							Block size used when compressing. This is a reasonable
							default.
							Batchlimits that are too big may cause files to exceed
							the
							defined filesize limits.
        </value>
					</description>
				</parameter>
				<parameter name="omitmetadata" type="boolean"
					booleanEncoding="truefalse" defaultParameter="false" defaultValue="false">
					<description lang="en">
						<value>
							Omit non-geographic metadata on OSM entities. This includes
							version
							number and timestamp of the last edit to the entity as
							well as
							the user name and id of the last modifier. Omitting this
							metadata
							can save 15% of the file size when exporting to software
							that
							does not need this data.
        </value>
					</description>
				</parameter>
				<parameter name="usedense" type="boolean" booleanEncoding="truefalse"
					defaultParameter="false" defaultValue="true">
					<description lang="en">
						<value>
							Nodes can be represented in a regular format or a dense
							format. The
							dense format is about 30% smaller, but more complex.
							To make it
							easier to interoperate with (future) software that
							chooses to not
							implement the dense format, the dense format may be
							disabled.
						</value>
					</description>
				</parameter>
				<parameter name="granularity" type="int" defaultParameter="false"
					defaultValue="100">
					<description lang="en">
						<value>
							The granularity or precision used to store coordinates. The
							default
							of 100 nanodegrees is the highest precision used by OSM,
							corresponding to about 1.1cm at the equator. In the current
							osmosis implementation, the granularity must be a multiple of
							100. If map data is going to be exported to software that does
							not need the full precision, increasing the granularity to 10000
							nanodegrees can save about 10% of the file size, while still
							having 1.1m precision.
        </value>
					</description>
				</parameter>
				<parameter name="compress" type="enum" defaultParameter="false"
					defaultValue="deflate">
					<description lang="en">
						<value>
							'deflate' uses deflate compression on each block. 'none'
							disables
							compression. These files are about twice as fast to write
							and
							twice the size.
        </value>
					</description>
					<enumValue value="deflate" />
					<enumValue value="none" />
				</parameter>
			</task>

			<task name="write-pgsql" shortName="wp">
				<description lang="en">
					<value>
						Populates an empty PostGIS database with a "simple" schema.
						A schema
						creation script is available in the osmosis script
						directory.
					</value>
				</description>
				<inputPipe count="single" index="0" type="entity" />
				<parameter name="authFile" defaultParameter="false"
					required="false" type="filename">
					<description lang="en">
						<value>
							The name of the file containing database login credentials.
						</value>
					</description>
				</parameter>
				<parameter name="host" defaultParameter="false" required="false"
					defaultValue="localhost" type="string">
					<description lang="en">
						<value>
							The database host server.
        </value>
					</description>
				</parameter>
				<parameter name="database" defaultParameter="false"
					required="false" defaultValue="osm" type="string">
					<description lang="en">
						<value>
							The database instance.
        </value>
					</description>
				</parameter>
				<parameter name="user" defaultParameter="false" required="false"
					defaultValue="osm" type="string">
					<description lang="en">
						<value>
							The database user name.
        </value>
					</description>
				</parameter>
				<parameter name="password" defaultParameter="false"
					required="false" type="string">
					<description lang="en">
						<value>
							The database password.
        </value>
					</description>
				</parameter>
				<parameter name="validateSchemaVersion" defaultParameter="false"
					required="false" defaultValue="true" type="boolean"
					booleanEncoding="yesno">
					<description lang="en">
						<value>
							If yes is specified, the task will validate the current
							schema
							version before accessing the database.
        </value>
					</description>
				</parameter>
				<parameter name="allowIncorrectSchemaVersion"
					defaultParameter="false" required="false" defaultValue="true" type="boolean"
					booleanEncoding="yesno">
					<description lang="en">
						<value>
							If validateSchemaVersion is yes, this option controls the
							result of
							a schema version check failure. If this option is yes, a
							warning
							is displayed and execution continues. If this option is
							no, an
							error is displayed and the program aborts.
        </value>
					</description>
				</parameter>
				<parameter name="enableBboxBuilder" defaultParameter="false"
					required="false" defaultValue="false" type="boolean"
					booleanEncoding="yesno">
					<description lang="en">
						<value>
							If yes is specified, the task will build the bbox geometry
							column
							using a java-based solution instead of running a
							post-import
							query. Using this option provides significant
							performance
							improvements compared to the default query approach.
							Note that
							the task will fail if this option is enabled and the
							bbox column
							doesn't exist.
        </value>
					</description>
				</parameter>
				<parameter name="enableLinestringBuilder"
					defaultParameter="false" required="false" defaultValue="false"
					type="boolean" booleanEncoding="yesno">
					<description lang="en">
						<value>
							As per the enableBboxBuilder option but for the linestring
							geometry
							column.
        </value>
					</description>
				</parameter>
				<parameter name="nodeLocationStoreType" defaultParameter="false"
					required="false" defaultValue="CompactTempFile" type="enum">
					<description lang="en">
						<value>
							This option only takes effect if at least one of the
							enableBboxBuilder and enableLinestringBuilder options are
							enabled. Both geometry builder implementations require knowledge
							of all node locations. This option specifies how those nodes are
							temporarily stored. If you have large amounts of memory (at least
							6GB of system memory, a 64-bit JVM and at least 4GB of JVM RAM
							specified with the -Xmx option) you may use the "InMemory"
							option. Otherwise you must choose between the "TempFile" option
							which is much slower but still faster than relying on the default
							database geometry building implementation, or the
							"CompactTempFile" option which is more efficient for smaller
							datasets.
        </value>
					</description>
					<enumValue value="InMemory" />
					<enumValue value="TempFile" />
					<enumValue value="CompactTempFile" />
				</parameter>
			</task>

			<task name="fast-write-pgsql" shortName="fwp">
				<description lang="en">
					<value>
						Populates an empty PostGIS database with a "simple" schema.
						This achieves
						the same result as the standard --write-pgsql task
						but uses the
						recent COPY support added to Java PostgreSQL JDBC
						drivers to
						improve import speed.
      </value>
				</description>
				<inputPipe count="single" index="0" type="entity" />
				<parameter name="authFile" defaultParameter="false"
					required="false" type="filename">
					<description lang="en">
						<value>
							The name of the file containing database login credentials.
						</value>
					</description>
				</parameter>
				<parameter name="host" defaultParameter="false" required="false"
					defaultValue="localhost" type="string">
					<description lang="en">
						<value>
							The database host server.
        </value>
					</description>
				</parameter>
				<parameter name="database" defaultParameter="false"
					required="false" defaultValue="osm" type="string">
					<description lang="en">
						<value>
							The database instance.
        </value>
					</description>
				</parameter>
				<parameter name="user" defaultParameter="false" required="false"
					defaultValue="osm" type="string">
					<description lang="en">
						<value>
							The database user name.
        </value>
					</description>
				</parameter>
				<parameter name="password" defaultParameter="false"
					required="false" type="string">
					<description lang="en">
						<value>
							The database password.
        </value>
					</description>
				</parameter>
				<parameter name="validateSchemaVersion" defaultParameter="false"
					required="false" defaultValue="true" type="boolean"
					booleanEncoding="yesno">
					<description lang="en">
						<value>
							If yes is specified, the task will validate the current
							schema
							version before accessing the database.
        </value>
					</description>
				</parameter>
				<parameter name="allowIncorrectSchemaVersion"
					defaultParameter="false" required="false" defaultValue="true" type="boolean"
					booleanEncoding="yesno">
					<description lang="en">
						<value>
							If validateSchemaVersion is yes, this option controls the
							result of
							a schema version check failure. If this option is yes, a
							warning
							is displayed and execution continues. If this option is
							no, an
							error is displayed and the program aborts.
        </value>
					</description>
				</parameter>
				<parameter name="enableBboxBuilder" defaultParameter="false"
					required="false" defaultValue="false" type="boolean"
					booleanEncoding="yesno">
					<description lang="en">
						<value>
							If yes is specified, the task will build the bbox geometry
							column
							using a java-based solution instead of running a
							post-import
							query. Using this option provides significant
							performance
							improvements compared to the default query approach.
							Note that
							the task will fail if this option is enabled and the
							bbox column
							doesn't exist.
        </value>
					</description>
				</parameter>
				<parameter name="enableLinestringBuilder"
					defaultParameter="false" required="false" defaultValue="false"
					type="boolean" booleanEncoding="yesno">
					<description lang="en">
						<value>
							As per the enableBboxBuilder option but for the linestring
							geometry
							column.
        </value>
					</description>
				</parameter>
				<parameter name="nodeLocationStoreType" defaultParameter="false"
					required="false" defaultValue="CompactTempFile" type="enum">
					<description lang="en">
						<value>
							This option only takes effect if at least one of the
							enableBboxBuilder and enableLinestringBuilder options are
							enabled. Both geometry builder implementations require knowledge
							of all node locations. This option specifies how those nodes are
							temporarily stored. If you have large amounts of memory (at least
							6GB of system memory, a 64-bit JVM and at least 4GB of JVM RAM
							specified with the -Xmx option) you may use the "InMemory"
							option. Otherwise you must choose between the "TempFile" option
							which is much slower but still faster than relying on the default
							database geometry building implementation, or the
							"CompactTempFile" option which is more efficient for smaller
							datasets.
        </value>
					</description>
					<enumValue value="InMemory" />
					<enumValue value="TempFile" />
					<enumValue value="CompactTempFile" />
				</parameter>
			</task>

			<task name="write-pgsql-dump" shortName="wpd">
				<description lang="en">
					<value>
						Writes a set of data files suitable for loading a PostGIS
						database with
						a "simple" schema using COPY statements. A schema
						creation script
						is available in the osmosis script directory. A
						load script is
						also available which will invoke the COPY statements
						and update
						all indexes and special index support columns
						appropriately. This
						option should be used on large import data
						(like the planet file),
						since it is much faster than --write-pgsql.
					</value>
				</description>
				<inputPipe count="single" index="0" type="entity" />
				<parameter name="directory" type="string" required="true"
					defaultValue="pgimport" defaultParameter="false">
					<description lang="en">
						<value>
							The name of the directory to write the data files into.
						</value>
					</description>
				</parameter>
				<parameter name="enableBboxBuilder" defaultParameter="false"
					required="false" defaultValue="false" type="boolean"
					booleanEncoding="yesno">
					<description lang="en">
						<value>
							If yes is specified, the task will build the bbox geometry
							column
							using a java-based solution instead of running a
							post-import
							query. Using this option provides significant
							performance
							improvements compared to the default query approach.
							Note that
							the task will fail if this option is enabled and the
							bbox column
							doesn't exist.
        </value>
					</description>
				</parameter>
				<parameter name="enableLinestringBuilder"
					defaultParameter="false" required="false" defaultValue="false"
					type="boolean" booleanEncoding="yesno">
					<description lang="en">
						<value>
							As per the enableBboxBuilder option but for the linestring
							geometry
							column.
        </value>
					</description>
				</parameter>
				<parameter name="nodeLocationStoreType" defaultParameter="false"
					required="false" defaultValue="CompactTempFile" type="enum">
					<description lang="en">
						<value>
							This option only takes effect if at least one of the
							enableBboxBuilder and enableLinestringBuilder options are
							enabled. Both geometry builder implementations require knowledge
							of all node locations. This option specifies how those nodes are
							temporarily stored. If you have large amounts of memory (at least
							6GB of system memory, a 64-bit JVM and at least 4GB of JVM RAM
							specified with the -Xmx option) you may use the "InMemory"
							option. Otherwise you must choose between the "TempFile" option
							which is much slower but still faster than relying on the default
							database geometry building implementation, or the
							"CompactTempFile" option which is more efficient for smaller
							datasets.
        </value>
					</description>
					<enumValue value="InMemory" />
					<enumValue value="TempFile" />
					<enumValue value="CompactTempFile" />
				</parameter>
			</task>
			<description lang="en">
				<value>Consumes entity streams and writes outputs.</value></description>
		</function>

		<function id="write-change" friendlyName="Write Change Tasks">
			<task name="write-xml-change" friendlyName="Write OSM XML change"
				shortName="wxc">
				<description lang="en">
					<value>Writes changes to an OSM XML change file.</value>
				</description>
				<inputPipe index="0" count="single" type="change">
					<description lang="en">
						<value>
							Consumes an change stream.
        </value>
					</description>
				</inputPipe>
				<parameter name="file" type="filename" defaultParameter="true"
					required="true" defaultValue="change.osc">
					<description lang="en">
						<value>
							The name of the osm change file to be written, "-" means
							STDOUT.
						</value>
					</description>
				</parameter>
				<parameter name="compressionMethod" type="enum"
					defaultValue="none">
					<description lang="en">
						<value>
							Specifies the compression method that has been used to
							compress the file.
							In most cases this isn't
							required because the
							compression method will be automatically determined
							from the file
							name
							(*.gz=gzip, *.bz2=bzip2).
        </value>
					</description>
					<enumValue value="none" friendlyName="None" />
					<enumValue value="gzip" />
					<enumValue value="bzip2" />
				</parameter>
			</task>

			<task name="write-apidb-change" shortName="wdc">
				<description lang="en">
					<value>
						Applies a changeset to an existing populated API database.
					</value>
				</description>
				<inputPipe count="single" index="0" type="change" />
				<parameter name="authFile" defaultParameter="false"
					required="false" type="filename">
					<description lang="en">
						<value>
							The name of the file containing database login credentials.
						</value>
					</description>
				</parameter>
				<parameter name="host" defaultParameter="false" required="false"
					defaultValue="localhost" type="string">
					<description lang="en">
						<value>
							The database host server.
        </value>
					</description>
				</parameter>
				<parameter name="database" defaultParameter="false"
					required="false" defaultValue="osm" type="string">
					<description lang="en">
						<value>
							The database instance.
        </value>
					</description>
				</parameter>
				<parameter name="user" defaultParameter="false" required="false"
					defaultValue="osm" type="string">
					<description lang="en">
						<value>
							The database user name.
        </value>
					</description>
				</parameter>
				<parameter name="password" defaultParameter="false"
					required="false" type="string">
					<description lang="en">
						<value>
							The database password.
        </value>
					</description>
				</parameter>
				<parameter name="dbType" defaultParameter="false"
					required="false" type="enum">
					<description lang="en">
						<value>
							The type of database being used.
        </value>
					</description>
					<enumValue value="postgresql" />
					<enumValue value="mysql" />
				</parameter>
				<parameter name="validateSchemaVersion" defaultParameter="false"
					required="false" defaultValue="true" type="boolean"
					booleanEncoding="yesno">
					<description lang="en">
						<value>
							If yes is specified, the task will validate the current
							schema
							version before accessing the database.
        </value>
					</description>
				</parameter>
				<parameter name="allowIncorrectSchemaVersion"
					defaultParameter="false" required="false" defaultValue="true" type="boolean"
					booleanEncoding="yesno">
					<description lang="en">
						<value>
							If validateSchemaVersion is yes, this option controls the
							result of
							a schema version check failure. If this option is yes, a
							warning
							is displayed and execution continues. If this option is
							no, an
							error is displayed and the program aborts.
        </value>
					</description>
				</parameter>
				<parameter name="populateCurrentTables" defaultParameter="false"
					required="false" defaultValue="true" type="boolean"
					booleanEncoding="yesno">
					<description lang="en">
						<value>
							If yes is specified, the current tables will be populated
							after the
							initial history table population. If only history tables
							are
							required, this reduces the import time by approximately 80%.
						</value>
					</description>
				</parameter>
			</task>

			<task name="upload-xml-change">
				<description lang="en">
					<value>
						Uploade a changeset to an existing populated API server via
						HTTP.
      </value>
				</description>
				<inputPipe index="0" count="single" type="change" />
				<parameter name="server" type="uri" required="true"
					defaultValue="http://api.openstreetmap.org/api/0.6">
					<description lang="en">
						<value>
							The url of the API server.
        </value>
					</description>
				</parameter>
				<parameter name="user" type="string" required="true">
					<description lang="en">
						<value>
							The api user name.
        </value>
					</description>
				</parameter>
				<parameter name="password" type="string" required="true">
					<description lang="en">
						<value>
							The api password.
        </value>
					</description>
				</parameter>
			</task>

			<task name="write-pgsql-change" shortName="wpc">
				<description lang="en">
					<value>
						Write changes to PostGIS database with "simple" schema.
					</value>
				</description>
				<inputPipe count="single" index="0" type="change" />
				<parameter name="authFile" defaultParameter="false"
					required="false" type="filename">
					<description lang="en">
						<value>
							The name of the file containing database login credentials.
						</value>
					</description>
				</parameter>
				<parameter name="host" defaultParameter="false" required="false"
					defaultValue="localhost" type="string">
					<description lang="en">
						<value>
							The database host server.
          </value>
					</description>
				</parameter>
				<parameter name="database" defaultParameter="false"
					required="false" defaultValue="osm" type="string">
					<description lang="en">
						<value>
							The database instance.
          </value>
					</description>
				</parameter>
				<parameter name="user" defaultParameter="false" required="false"
					defaultValue="osm" type="string">
					<description lang="en">
						<value>
							The database user name.
          </value>
					</description>
				</parameter>
				<parameter name="password" defaultParameter="false"
					required="false" type="string">
					<description lang="en">
						<value>
							The database password.
          </value>
					</description>
				</parameter>
				<parameter name="validateSchemaVersion" defaultParameter="false"
					required="false" defaultValue="true" type="boolean"
					booleanEncoding="yesno">
					<description lang="en">
						<value>
							If yes is specified, the task will validate the current
							schema
							version before accessing the database.
          </value>
					</description>
				</parameter>
				<parameter name="allowIncorrectSchemaVersion"
					defaultParameter="false" required="false" defaultValue="true" type="boolean"
					booleanEncoding="yesno">
					<description lang="en">
						<value>
							If validateSchemaVersion is yes, this option controls the
							result of
							a schema version check failure. If this option is yes, a
							warning
							is displayed and execution continues. If this option is
							no, an
							error is displayed and the program aborts.
          </value>
					</description>
				</parameter>
			</task>
			<description lang="en">
				<value>Consumes change streams and writes outputs.</value></description>
		</function>

		<function id="truncate" friendlyName="Truncate Tasks">
			<task name="truncate-apidb" shortName="td">
				<description lang="en">
					<value>
						Truncates all current and history tables in an API database.
					</value>
				</description>
				<parameter name="authFile" defaultParameter="false"
					required="false" type="filename">
					<description lang="en">
						<value>
							The name of the file containing database login credentials.
						</value>
					</description>
				</parameter>
				<parameter name="host" defaultParameter="false" required="false"
					defaultValue="localhost" type="string">
					<description lang="en">
						<value>
							The database host server.
        </value>
					</description>
				</parameter>
				<parameter name="database" defaultParameter="false"
					required="false" defaultValue="osm" type="string">
					<description lang="en">
						<value>
							The database instance.
        </value>
					</description>
				</parameter>
				<parameter name="user" defaultParameter="false" required="false"
					defaultValue="osm" type="string">
					<description lang="en">
						<value>
							The database user name.
        </value>
					</description>
				</parameter>
				<parameter name="password" defaultParameter="false"
					required="false" type="string">
					<description lang="en">
						<value>
							The database password.
        </value>
					</description>
				</parameter>
				<parameter name="dbType" defaultParameter="false"
					required="false" type="enum">
					<description lang="en">
						<value>
							The type of database being used.
        </value>
					</description>
					<enumValue value="postgresql" />
					<enumValue value="mysql" />
				</parameter>
				<parameter name="validateSchemaVersion" defaultParameter="false"
					required="false" defaultValue="true" type="boolean"
					booleanEncoding="yesno">
					<description lang="en">
						<value>
							If yes is specified, the task will validate the current
							schema
							version before accessing the database.
        </value>
					</description>
				</parameter>
				<parameter name="allowIncorrectSchemaVersion"
					defaultParameter="false" required="false" defaultValue="true" type="boolean"
					booleanEncoding="yesno">
					<description lang="en">
						<value>
							If validateSchemaVersion is yes, this option controls the
							result of
							a schema version check failure. If this option is yes, a
							warning
							is displayed and execution continues. If this option is
							no, an
							error is displayed and the program aborts.
        </value>
					</description>
				</parameter>
			</task>

			<task name="truncate-pgsql" shortName="tp">
				<description lang="en">
					<value>
						Truncates all tables in a PostGIS with a "simple" schema.
					</value>
				</description>
				<parameter name="authFile" defaultParameter="false"
					required="false" type="filename">
					<description lang="en">
						<value>
							The name of the file containing database login credentials.
						</value>
					</description>
				</parameter>
				<parameter name="host" defaultParameter="false" required="false"
					defaultValue="localhost" type="string">
					<description lang="en">
						<value>
							The database host server.
        </value>
					</description>
				</parameter>
				<parameter name="database" defaultParameter="false"
					required="false" defaultValue="osm" type="string">
					<description lang="en">
						<value>
							The database instance.
        </value>
					</description>
				</parameter>
				<parameter name="user" defaultParameter="false" required="false"
					defaultValue="osm" type="string">
					<description lang="en">
						<value>
							The database user name.
        </value>
					</description>
				</parameter>
				<parameter name="password" defaultParameter="false"
					required="false" type="string">
					<description lang="en">
						<value>
							The database password.
        </value>
					</description>
				</parameter>
				<parameter name="validateSchemaVersion" defaultParameter="false"
					required="false" defaultValue="true" type="boolean"
					booleanEncoding="yesno">
					<description lang="en">
						<value>
							If yes is specified, the task will validate the current
							schema
							version before accessing the database.
        </value>
					</description>
				</parameter>
				<parameter name="allowIncorrectSchemaVersion"
					defaultParameter="false" required="false" defaultValue="true" type="boolean"
					booleanEncoding="yesno">
					<description lang="en">
						<value>
							If validateSchemaVersion is yes, this option controls the
							result of
							a schema version check failure. If this option is yes, a
							warning
							is displayed and execution continues. If this option is
							no, an
							error is displayed and the program aborts.
        </value>
					</description>
				</parameter>
			</task>
			<description lang="en">
				<value>Truncates sources.</value></description>
		</function>
		<description lang="en">
			<value>The operations with the ability to read various sources, write various outputs or truncate them.</value></description>
		<description lang="de">
			<value>Die Operationen mit denen verschiedene Quellen gelesen oder gekürzt und verschiedene Ausgaben geschrieben werden können.</value></description></functionGroup>

	<functionGroup id="area-filtering" friendlyName="Area Filtering" color="100,255,100">
		<function id="bbox-entity" friendlyName="Entity Bounding Box">
			<task name="bounding-box" shortName="bb">
				<description lang="en">
					<value>
						Extracts data within a specific bounding box defined by
						lat/lon
						coordinates.
      </value>
				</description>
				<inputPipe count="single" index="0" type="entity" />
				<outputPipe count="single" index="0" type="entity" />
				
				<parameter name="left" type="bbox">
					<description lang="en"><value>The longitude of the left edge of the box.</value></description>
				</parameter>
				<parameter name="right" type="bbox">
					<description lang="en"><value>The longitude of the right edge of the box.</value></description>
				</parameter>
				<parameter name="top" type="bbox">
					<description lang="en"><value>The latitude of the top edge of the box.</value></description>
				</parameter>
				<parameter name="bottom" type="bbox">
					<description lang="en"><value>The latitude of the bottom edge of the box.</value></description>
				</parameter>

				<parameter name="x1" type="string">
					<description lang="en"><value>Slippy map coordinate of the left edge of the box.</value></description>
				</parameter>
				<parameter name="y1" type="string">
					<description lang="en"><value>Slippy map coordinate of the top edge of the box.</value></description>
				</parameter>
				<parameter name="x2" type="string">
					<description lang="en"><value>Slippy map coordinate of the right edge of the box.</value></description>
				</parameter>
				<parameter name="y2" type="string">
					<description lang="en"><value>Slippy map coordinate of the bottom edge of the box.	</value></description>
				</parameter>
				
				<parameter name="zoom" type="string">
					<description lang="en"><value>Slippy map zoom.</value></description>
				</parameter>
				
				
				<parameter name="completeWays" type="boolean"
					booleanEncoding="yesno" defaultValue="false">
					<description lang="en">
						<value>
							Include all available nodes for ways which have at least
							one node in the
							bounding box.
        </value>
					</description>
				</parameter>
				<parameter name="completeRelations" type="boolean"
					booleanEncoding="yesno" defaultValue="false">
					<description lang="en">
						<value>
							Include all available relations which are members of
							relations which
							have at least one member in the bounding box.
						</value>
					</description>
				</parameter>
				<parameter name="idTrackerType" type="enum" defaultValue="Dynamic">
					<description lang="en">
						<value>
							Specifies the memory mechanism for tracking selected ids.
							BitSet is more
							efficient for very large bounding boxes
							(where node
							count is greater than 1/32 of maximum node id), IdList will
							be
							more efficient for all smaller
							bounding boxes. Dynamic breaks the
							overall id range into small segments
							and chooses the most
							efficient of
							IdList or BitSet for that interval.
        </value>
					</description>
					<enumValue value="Dynamic" />
					<enumValue value="BitSet" />
					<enumValue value="IdList" />
				</parameter>
				<parameter name="clipIncompleteEntities" type="boolean"
					booleanEncoding="truefalse" defaultValue="false">
					<description lang="en">
						<value>
							Specifies what the behaviour should be when entities are
							encountered that
							have missing
							relationships with other entities.
							For example, ways with missing nodes, and
							relations with
							missing
							members. This occurs most often at the boundaries of selection
							areas,
							but may also occur due to referential integrity issues in
							the
							database or inconsistencies in the
							planet file snapshot
							creation. If set to true the entities are modified
							to remove the
							missing
							references, otherwise they're left intact.
        </value>
					</description>
				</parameter>
			</task>
			<description lang="en">
				<value>Extracts data from an entity stream within a bounding box.</value></description>
		</function>

		<function id="bbox-dataset" friendlyName="Dataset Bounding Box">
			<task name="dataset-bounding-box" shortName="dbb">
				<description lang="en">
					<value>
						Extracts data within a specific bounding box defined by
						lat/lon
						coordinates. This differs from the --bounding-box task in
						that it
						operates on a dataset instead of an entity stream, in other
						words
						it uses the features of the underlying database to perform a
						spatial query instead of examining all nodes in a complete stream.
						This implementation will never clip ways at box boundaries, and
						depending on the underlying implementation may detect ways
						crossing a box without having any nodes within that box.
      </value>
				</description>
				<inputPipe count="single" index="0" type="dataset" />
				<outputPipe count="single" index="0" type="entity" />
				<parameter name="bbox" type="bbox" required="true">
					<description lang="en">
						<value>The bounding box to filter.</value>
					</description>
				</parameter>
				<parameter name="completeWays" type="boolean"
					booleanEncoding="yesno" defaultValue="false">
					<description lang="en">
						<value>
							Include all available nodes for ways which have at least
							one node in the
							bounding box.
        </value>
					</description>
				</parameter>
			</task>
			<description lang="en">
				<value>Extracts data from a dataset stream within a bounding box.</value>
			</description>
		</function>

		<function id="bpolygon-entity" friendlyName="Entity Bounding Polygon">
			<task name="bounding-polygon" shortName="bp">
				<description lang="en">
					<value>
						Extracts data within a polygon defined by series of lat/lon
						coordinates
						loaded from a polygon file.
      </value>
				</description>
				<inputPipe count="single" index="0" type="entity" />
				<outputPipe count="single" index="0" type="entity" />
				<parameter name="file" type="filename" defaultValue="polygon.text">
					<description lang="en">
						<value>
							The file containing the polygon definition.
        </value>
					</description>
				</parameter>
				<parameter name="completeWays" type="boolean"
					booleanEncoding="yesno" defaultValue="false">
					<description lang="en">
						<value>
							Include all available nodes for ways which have at least
							one node in the
							bounding box.
        </value>
					</description>
				</parameter>
				<parameter name="completeRelations" type="boolean"
					booleanEncoding="yesno" defaultValue="false">
					<description lang="en">
						<value>
							Include all available relations which are members of
							relations which
							have at least one member in the bounding box.
						</value>
					</description>
				</parameter>
				<parameter name="idTrackerType" type="enum" defaultValue="Dynamic">
					<description lang="en">
						<value>
							Specifies the memory mechanism for tracking selected ids.
							BitSet is more
							efficient for very large bounding boxes
							(where node
							count is greater than 1/32 of maximum node id), IdList will
							be
							more efficient for all smaller
							bounding boxes. Dynamic breaks the
							overall id range into small segments
							and chooses the most
							efficient of
							IdList or BitSet for that interval.
        </value>
					</description>
					<enumValue value="Dynamic" />
					<enumValue value="BitSet" />
					<enumValue value="IdList" />
				</parameter>
				<parameter name="clipIncompleteEntities" type="boolean"
					booleanEncoding="truefalse" defaultValue="false">
					<description lang="en">
						<value>
							Specifies what the behaviour should be when entities are
							encountered that
							have missing
							relationships with other entities.
							For example, ways with missing nodes, and
							relations with
							missing
							members. This occurs most often at the boundaries of selection
							areas,
							but may also occur due to referential integrity issues in
							the
							database or inconsistencies in the
							planet file snapshot
							creation. If set to true the entities are modified
							to remove the
							missing
							references, otherwise they're left intact.
        </value>
					</description>
				</parameter>
			</task>
			<description lang="en">
				<value>Extracts data from an entity stream within a bounding polygon.</value></description>
		</function>
		<description lang="en">
			<value>Operations which extract specific areas out of a stream.</value></description>

	</functionGroup>

	<functionGroup id="data-manipulation"
		friendlyName="Data Manipulation" color="188,212,230">
		<function id="node" friendlyName="Node Filters">
			<task name="node-key" shortName="nk">
				<description lang="en">
					<value>
						Given a list of "key" tags, this filter passes
						on only those nodes that have at least one of
						those tags set. Note that this filter only
						operates on nodes. All ways and relations are
						filtered out.
					</value>
				</description>
				<inputPipe type="entity" count="single" index="0" />
				<outputPipe type="entity" count="single" index="0" />
				<parameter name="keyList" type="list" listType="node-key">
					<description lang="en">
						<value>
							Comma-separated list of desired keys.
						</value>
					</description>
				</parameter>
			</task>

			<task name="node-key-value" shortName="nkv">
				<description lang="en">
					<value>
						Given a list of "key.value" tags, this filter
						passes on only those nodes that have at least
						one of those tags set. Note that this filter
						only operates on nodes. All ways and relations
						are filtered out.
					</value>
				</description>
				<inputPipe type="entity" count="single" index="0" />
				<outputPipe type="entity" count="single" index="0" />
				<parameter name="keyValueList" type="list" listType="node-key-value">
					<description lang="en">
						<value>
							Comma-separated list of desired key.value
							combinations.
						</value>
					</description>
				</parameter>
			</task>

			
			<task name="used-node" shortName="un">
				<description lang="en">
					<value>
						Restricts output of nodes to those that are used
						in ways.
					</value>
				</description>
				<inputPipe type="entity" count="single" index="0" />
				<outputPipe type="entity" count="single" index="0" />
				<parameter name="idTrackerType" type="enum" defaultValue="IdList">
					<description lang="en">
						<value>
							Specifies the memory mechanism for tracking
							selected ids. BitSet is more efficient for
							very large bounding boxes (where node count
							is greater than 1/32 of maximum node id),
							IdList will be more efficient for all
							smaller bounding boxes.
						</value>
					</description>
					<enumValue value="BitSet" />
					<enumValue value="IdList" />
				</parameter>
			</task><description lang="en">
				<value>Filters out all nodes that do not have a specific property.</value></description>
		</function>

		<function id="way" friendlyName="Way Filters">
			<task name="way-key" shortName="wk">
				<description lang="en">
					<value>
						Given a list of "key" tags, this filter passes
						on only those ways that have at least one of
						those tags set. Note that this filter only
						operates on ways. All nodes and relations are
						passed on unmodified.
					</value>
				</description>
				<inputPipe type="entity" count="single" index="0" />
				<outputPipe type="entity" count="single" index="0" />
				<parameter name="keyList" type="list" listType="way-key">
					<description lang="en">
						<value>
							Comma-separated list of desired keys.
						</value>
					</description>
				</parameter>
			</task>

			<task name="way-key-value" shortName="wkv">
				<description lang="en">
					<value>
						Given a list of "key.value" tags, this filter
						passes on only those ways that have at least one
						of those tags set. Note that this filter only
						operates on ways. All nodes and relations are
						passed on unmodified.
					</value>
				</description>
				<inputPipe type="entity" count="single" index="0" />
				<outputPipe type="entity" count="single" index="0" />
				<parameter name="keyValueList" type="list" listType="way-key-value">
					<description lang="en">
						<value>
							Comma-separated list of desired key.value
							combinations.
						</value>
					</description>
				</parameter>
			</task>
			<description lang="en">
				<value>Filters all ways that do not have specific tags set. All nodes and relations are passed on unmodified. </value></description>
		</function>

		<function id="used-node" friendlyName="Universal Filter">
			<task name="tag-filter" shortName="tf">
				<description lang="en">
					<value>
						Filters entities based on their type and
						optionally based on their tags. Can accept or
						reject entities that match the filter
						specification.
					</value>
				</description>
				<inputPipe type="entity" count="single" index="0" />
				<outputPipe type="entity" count="single" index="0" />
				<parameter name="filter mode" type="string">
					<description lang="en">
						<value>
							A two-field dash-separated string which
							specifies accept/reject behavior and the
							entity type on which this filter operates.
						</value>
					</description>
				</parameter>
			</task>
			<description lang="en">
				<value>Filters data based on its type and tags.</value></description>
		</function>
		<description lang="en">
			<value>Operations that filter specific data out of a stream.</value></description>
	</functionGroup>

	<functionGroup id="flow-control" friendlyName="Flow Control"
		color="254,60,191">
		

		<function id="write-null" friendlyName="Entity Write Null">
			<task name="write-null" shortName="wn">
				<description lang="en">
					<value>
						Discards all input data. This is useful for
						osmosis performance testing and for testing the
						integrity of input files.
					</value>
				</description>
				<inputPipe type="entity" count="single" index="0" />
			</task>
			<description lang="en">
				<value>Discards the entity stream put into it.</value></description>

		</function>

		<function id="write-null-change"
			friendlyName="Change Write Null">
			<task name="write-null-change" shortName="wnc">
				<description lang="en">
					<value>
						Discards all input change data. This is useful
						for osmosis performance testing and for testing
						the integrity of input files.
					</value>
				</description>
				<inputPipe type="change" count="single" index="0" />
			</task>
			<description lang="en">
				<value>Discards the change stream put into it.</value></description>
		</function>

		<function id="buffer" friendlyName="Entity Buffer">
			<task name="buffer" shortName="b">
				<description lang="en">
					<value>
						Allows the pipeline processing to be split
						across multiple threads. The thread for the
						input task will post data into a buffer of fixed
						capacity and block when the buffer fills. This
						task creates a new thread that reads from the
						buffer and blocks if no data is available. This
						is useful if multiple CPUs are available and
						multiple tasks consume significant CPU.
					</value>
				</description>
				<inputPipe type="entity" count="single" index="0" />
				<outputPipe type="entity" count="single" index="0" />
				<parameter name="bufferCapacity" type="int"
					defaultValue="100" defaultParameter="true">
					<description lang="en">
						<value>
							The size of the storage buffer. This is
							defined in terms of the number of entity
							objects to be stored. An entity corresponds
							to an OSM type such as a node.
						</value>
					</description>
				</parameter>
			</task>
			<description lang="en">
				<value>Splits the pipeline processing of this entity stream along multiple threads for performance gain.</value></description>
		</function>

		<function id="buffer-change" friendlyName="Change Buffer">
			<task name="buffer-change" shortName="bc">
				<description lang="en">
					<value>
						Allows the pipeline processing to be split
						across multiple threads. The thread for the
						input task will post data into a buffer of fixed
						capacity and block when the buffer fills. This
						task creates a new thread that reads from the
						buffer and blocks if no data is available. This
						is useful if multiple CPUs are available and
						multiple tasks consume significant CPU.
					</value>
				</description>
				<inputPipe type="change" count="single" index="0" />
				<outputPipe type="change" count="single" index="0" />
				<parameter name="bufferCapacity" type="int" defaultValue="100" defaultParameter="true">
					<description lang="en">
						<value>
							The size of the storage buffer. This is
							defined in terms of the number of change
							objects to be stored. A change object
							consists of a single entity with an
							associated action.
						</value>
					</description>
				</parameter>
			</task>
			<description lang="en">
				<value>Splits the pipeline processing of this change stream along multiple threads for performance gain.</value></description>
		</function><function id="dataset-dump" friendlyName="Convert Dataset To Entity">
			<task name="dataset-dump" shortName="dd">
				<description lang="en">
					<value>
						Converts an entire dataset to an entity stream.
					</value>
				</description>
				<inputPipe count="single" index="0" type="dataset" />
				<outputPipe count="single" index="0" type="entity" />
			</task>
			<description lang="en">
				<value>Converts a dataset stream into an entity stream.</value></description>
</function>
		<description lang="en">
			<value>Flow control operations in the pipeline which convert streams or improve performance.</value></description>
	</functionGroup>

	<functionGroup id="report" friendlyName="Report" color="255,175,25">
		<function id="report-entity" friendlyName="File Report">
			<task name="report-entity" shortName="re">
				<description lang="en">
					<value>
						Produces a summary report of each entity type
						and the users that last modified them.
					</value>
				</description>
				<inputPipe count="single" index="0" type="entity" />
				<parameter name="file" defaultParameter="true"
					type="filename" required="true" defaultValue="entity-report.txt">
					<description lang="en">
						<value>The file to write the report to.</value>
					</description>
				</parameter>
			</task><task name="report-integrity" shortName="ri">
				<description lang="en">
					<value>
						Produces a list of the referential integrity
						issues in the data source.
					</value>
				</description>
				<inputPipe count="single" index="0" type="entity" />
				<parameter name="file" defaultParameter="true" type="filename" required="true" defaultValue="integrity-report.txt">
					<description lang="en">
						<value>The file to write the report to.</value>
					</description>
				</parameter>
			</task>
			<description lang="en">
				<value>Writes a report about an entity stream or its integrity to a file.</value></description>
		</function>

		<function id="log-progress"
			friendlyName="Entity Log Progress">
			<task name="log-progress" shortName="lp">
				<description lang="en">
					<value>
						Logs progress information using jdk logging at
						info level at regular intervals. This can be
						inserted into the pipeline to allow the progress
						of long running tasks to be tracked.
					</value>
				</description>
				<inputPipe type="entity" count="single" index="0" />
				<outputPipe type="entity" count="single" index="0" />
				<parameter name="interval" type="int"
					defaultValue="5">
					<description lang="en">
						<value>
							The time interval between updates in
							seconds.
						</value>
					</description>
				</parameter>
			</task>
			<description lang="en">
				<value>Logs progress information about an entity stream in regular intervals.</value></description>
		</function>

		<function id="log-progress-change"
			friendlyName="Change Log Progress">
			<task name="log-progress-change" shortName="lpc">
				<description lang="en">
					<value>
						Logs progress of a change stream using jdk
						logging at info level at regular intervals. This
						can be inserted into the pipeline to allow the
						progress of long running tasks to be tracked.
					</value>
				</description>
				<inputPipe type="change" count="single" index="0" />
				<outputPipe type="change" count="single" index="0" />
				<parameter name="interval" type="int"
					defaultValue="5">
					<description lang="en">
						<value>
							The time interval between updates in
							seconds.
						</value>
					</description>
				</parameter>
			</task>
			<description lang="en">
				<value>Logs progress information about an change stream in regular intervals.</value></description>
		</function>
		<description lang="en">
			<value>Operations that generate reports or logging.</value></description>
	</functionGroup>

	<functionGroup id="set" friendlyName="Merge &amp; Sort" color="95,135,255">
		<function id="merge" friendlyName="Entity Merge">
			<task name="merge" shortName="m">
				<description lang="en">
					<value>
						Merges the contents of two data sources
						together. Note that this task requires both
						input streams to be sorted first by type then by
						id.
					</value>
				</description>
				<inputPipe type="entity" count="single" index="0" />
				<inputPipe type="entity" count="single" index="1" />
				<outputPipe type="entity" count="single" index="0" />
				<parameter name="conflictResolutionMethod" type="enum" defaultValue="version">
					<description lang="en">
						<value>
							The method to use for resolving conflicts
							between data from the two sources.
						</value>
					</description>
					<enumValue value="version">
						<description lang="en">
							<value>
								Choose the entity with the highest
								version, and second input source if both
								versions are identical.
							</value>
						</description>
					</enumValue>
					<enumValue value="timestamp">
						<description lang="en">
							<value>
								Choose the entity with the newest
								timestamp.
							</value>
						</description>
					</enumValue>
					<enumValue value="lastSource">
						<description lang="en">
							<value>
								Choose the entity from the second input
								source.
							</value>
						</description>
					</enumValue>
				</parameter>
			</task>
			<description lang="en">
				<value>Merges two entity streams into one.</value></description>
		</function><function id="merge-change" friendlyName="Change Merge">
			<task name="merge-change" shortName="mc">
				<description lang="en">
					<value>
						Merges the contents of two changesets together.
						Note that this task requires both input streams
						to be sorted first by type then by id.
					</value>
				</description>
				<inputPipe type="change" count="single" index="0" />
				<inputPipe type="change" count="single" index="1" />
				<outputPipe type="change" count="single" index="0" />
				<parameter name="conflictResolutionMethod" type="enum" defaultValue="version">
					<description lang="en">
						<value>
							The method to use for resolving conflicts
							between data from the two sources.
						</value>
					</description>
					<enumValue value="version">
						<description lang="en">
							<value>
								Choose the entity with the highest
								version, and second input source if both
								versions are identical.
							</value>
						</description>
					</enumValue>
					<enumValue value="timestamp">
						<description lang="en">
							<value>
								Choose the entity with the newest
								timestamp.
							</value>
						</description>
					</enumValue>
					<enumValue value="lastSource">
						<description lang="en">
							<value>
								Choose the entity from the second input
								source.
							</value>
						</description>
					</enumValue>
				</parameter>
			</task>
			<description lang="en">
				<value>Merges two change streams into one.</value></description>
</function><function id="sort" friendlyName="Entity Sort">
			<task name="sort" shortName="s">
				<description lang="en">
					<value>
						Sorts all data in an entity stream according to
						a specified ordering. This uses a file-based
						merge sort keeping memory usage to a minimum and
						allowing arbitrarily large data sets to be
						sorted.
					</value>
				</description>
				<inputPipe type="entity" count="single" index="0" />
				<outputPipe type="entity" count="single" index="0" />
			</task>
			<description lang="en">
				<value>Sorts the contents of an entity stream.</value></description>
</function>

		<function id="sort-change" friendlyName="Change Sort">
			<task name="sort-change" shortName="sc">
				<description lang="en">
					<value>
						Sorts all data in a change stream according to a
						specified ordering. This uses a file-based merge
						sort keeping memory usage to a minimum and
						allowing arbitrarily large data sets to be
						sorted.
					</value>
				</description>
				<inputPipe type="change" count="single" index="0" />
				<outputPipe type="change" count="single" index="0" />
				<parameter name="type" type="enum"
					defaultValue="streamable" defaultParameter="true">
					<description lang="en">
						<value>
							The ordering to apply to the data.
						</value>
					</description>
					<enumValue value="streamable">
						<description lang="en">
							<value>
								This specifies to sort by the entity
								type (eg. nodes before ways), then by
								the entity id. This allows a change to
								be applied to an xml file.
							</value>
						</description>
					</enumValue>
					<enumValue value="seekable">
						<description lang="en">
							<value>
								This sorts data so that it can be
								applied to a database without violating
								referential integrity.
							</value>
						</description>
					</enumValue>
				</parameter>
			</task>
			<description lang="en">
				<value>Sorts the contents of a change stream.</value></description>
		</function>

		

		

		

		<description lang="en">
			<value>Operations which provide the ability to merge and sort streams.</value></description>
	</functionGroup>

	<functionGroup id="changeset"
		friendlyName="Changeset Operations" color="211,155,250">
		<function id="apply-change" friendlyName="Apply change">
			<task name="apply-change" shortName="ac">
				<description lang="en">
					<value>
						Applies a change stream to a data stream. Note
						that this task requires both input streams to be
						sorted first by type then by id.
					</value>
				</description>
				<inputPipe index="0" count="single" type="entity" />
				<inputPipe index="1" count="single" type="change" />
				<outputPipe index="0" count="single" type="entity" />
			</task>
			<description lang="en">
				<value>Applies the changes of a change stream to another stream.</value></description>
		</function>

		<function id="derive-change" friendlyName="Derive change">
			<task name="derive-change" shortName="dc">
				<description lang="en">
					<value>
						Compares two data sources and produces a
						changeset of the differences. Note that this
						task requires both input streams to be sorted
						first by type then by id.
					</value>
				</description>
				<inputPipe index="0" count="single" type="entity" />
				<inputPipe index="1" count="single" type="entity" />
				<outputPipe index="0" count="single" type="change" />
			</task>
			<description lang="en">
				<value>Produces a change stream based on the differences of two streams.</value></description>
		</function>
		<function id="append-change" friendlyName="Append Change">
			<task name="append-change" shortName="apc">
				<description lang="en">
					<value>
						Combines multiple change streams into a single
						change stream. The data from each input is
						consumed in sequence so that the result is a
						concatenation of data from each source. This
						output stream stream will be unsorted and may
						need to be fed through a --sort-change task.
						This task is intended for use with full history
						change files. If delta change files are being
						used (i.e. only one change per entity per file),
						then the --merge-change task may be more
						appropriate.
					</value>
				</description>
				<inputPipe type="change" count="variable" specifiedBy="sourceCount" />
				<outputPipe type="change" count="single" index="0" />
				<parameter name="sourceCount" type="int" defaultValue="2">
					<description lang="en">
						<value>
							The number of change streams to be appended.
						</value>
					</description>
				</parameter>
			</task>
			<description lang="en">
				<value>Combines multiple change streams into one.</value></description>
		</function><function id="simplify-change" friendlyName="Simplify Change">
			<task name="simplify-change" shortName="simc">
				<description lang="en">
					<value>
						Collapses a "full-history" change stream into a
						"delta" change stream. The result of this
						operation is a change stream guaranteed to
						contain a maximum of one change per entity. For
						example, if an entity is created and modified in
						a single change file, this task will modify it
						to be a single create operation with the data of
						the modify operation.
					</value>
				</description>
				<inputPipe type="change" count="single" index="0" />
				<outputPipe type="change" count="single" index="0" />
			</task>
			<description lang="en">
				<value>Simplifies a change stream.</value></description>
</function><description lang="en">
			<value>Operations working with changesets which represent data patches.</value></description>
	</functionGroup>

	<functionGroup id="replication" friendlyName="Replication"
		color="127, 255, 212">
		<function id="read-change-interval"
			friendlyName="Read change-interval">
			<task name="read-change-interval" shortName="rci">
				<description lang="en">
					<value>
						Retrieves a set of change files from a server,
						merges them into a single stream, and tracks the
						current timestamp. The changes produced by this
						task are typically delta changes.
					</value>
				</description>
				<outputPipe count="single" index="0" type="change" />
				<parameter name="workingDirectory" type="directory"
					defaultParameter="true">
					<description lang="en">
						<value>
							The directory containing the state and
							config files.
						</value>
					</description>
				</parameter>
			</task>
		</function>

		<function id="read-change-interval-init"
			friendlyName="Read change-interval-init">
			<task name="read-change-interval-init" shortName="rcii">
				<description lang="en">
					<value>
						Initialises a working directory to contain files
						necessary for use by the --read-change-interval
						task. This task must be run once to create the
						directory structure and the configuration file
						manually edited to contain the required
						settings.
					</value>
				</description>
				<parameter name="workingDirectory" type="directory"
					defaultParameter="true">
					<description lang="en">
						<value>
							The directory to populate with state and
							config files.
						</value>
					</description>
				</parameter>
				<parameter name="initialDate" type="instant">
					<description lang="en">
						<value>
							The timestamp to begin replication from.
							Only changesets containing data after this
							timestamp will be downloaded. Note that
							unlike most tasks accepting dates, this date
							is specified in UTC.
						</value>
					</description>
				</parameter>
			</task>
		</function>

		<function id="read-replication-interval"
			friendlyName="Read replication-interval">
			<task name="read-change-interval-init" shortName="rcii">
				<description lang="en">
					<value>
						Initialises a working directory to contain files
						necessary for use by the --read-change-interval
						task. This task must be run once to create the
						directory structure and the configuration file
						manually edited to contain the required
						settings.
					</value>
				</description>
				<parameter name="workingDirectory" type="directory"
					defaultParameter="true">
					<description lang="en">
						<value>
							The directory to populate with state and
							config files.
						</value>
					</description>
				</parameter>
				<parameter name="initialDate" type="instant">
					<description lang="en">
						<value>
							The timestamp to begin replication from.
							Only changesets containing data after this
							timestamp will be downloaded. Note that
							unlike most tasks accepting dates, this date
							is specified in UTC.
						</value>
					</description>
				</parameter>
			</task>
		</function>

		<function id="read-replication-interval-init"
			friendlyName="Read replication-interval-init">
			<task name="read-replication-interval-init"
				shortName="rrii">
				<description lang="en">
					<value>
						Initialises a working directory to contain files
						necessary for use by the
						--read-replication-interval task. This task must
						be run once to create the directory structure
						and the configuration file manually edited to
						contain the required settings.
					</value>
				</description>
				<parameter name="workingDirectory" type="directory"
					defaultParameter="true">
					<description lang="en">
						<value>
							The directory to populate with state and
							config files.
						</value>
					</description>
				</parameter>
			</task>
		</function>

		<function id="merge-replication-files"
			friendlyName="Merge replication-files">
			<task name="merge-replication-files" shortName="mrf">
				<description lang="en">
					<value>
						Retrieves a set of replication files from a
						server, combines them into larger time
						intervals, sorts the result, and tracks the
						current timestamp. The changes produced by this
						task are full-history changes.
					</value>
				</description>
				<parameter name="workingDirectory" type="directory"
					defaultParameter="true">
					<description lang="en">
						<value>
							The directory containing the state and
							config files.
						</value>
					</description>
				</parameter>
			</task>
		</function>

		<function id="merge-replication-files-init"
			friendlyName="Merge replication-files-init">
			<task name="merge-replication-files-init"
				shortName="mrfi">
				<description lang="en">
					<value>
						Initialises a working directory to contain files
						necessary for use by the
						--merge-replication-files task. This task must
						be run once to create the directory structure
						and the configuration file manually edited to
						contain the required settings.
					</value>
				</description>
				<parameter name="workingDirectory" type="directory"
					defaultParameter="true">
					<description lang="en">
						<value>
							The directory containing the state and
							config files.
						</value>
					</description>
				</parameter>
			</task>
		</function>

		<function id="replicate-apidb" friendlyName="Replicate APIDb">
			<task name="replicate-apidb" shortName="repa">
				<description lang="en">
					<value>
						This task provides replication files for
						consumers to download. It is primarily run
						against the production API database with the
						results made available on the planet server. The
						first time this task runs it will initialise the
						working directory with the current state of the
						database server. Every subsequent invocation
						will read all changes since the last invocation
						and write the results to the output. All changes
						will be sorted by type, then id, then version.
					</value>
				</description>
				<outputPipe count="single" index="0" type="change" />
				<parameter name="authFile" defaultParameter="false"
					required="false" type="filename">
					<description lang="en">
						<value>
							The name of the file containing database
							login credentials.
						</value>
					</description>
				</parameter>
				<parameter name="host" defaultParameter="false"
					required="false" defaultValue="localhost" type="string">
					<description lang="en">
						<value>The database host server.</value>
					</description>
				</parameter>
				<parameter name="database" defaultParameter="false"
					required="false" defaultValue="osm" type="string">
					<description lang="en">
						<value>The database instance.</value>
					</description>
				</parameter>
				<parameter name="user" defaultParameter="false"
					required="false" defaultValue="osm" type="string">
					<description lang="en">
						<value>The database user name.</value>
					</description>
				</parameter>
				<parameter name="password" defaultParameter="false"
					required="false" type="string">
					<description lang="en">
						<value>The database password.</value>
					</description>
				</parameter>
				<parameter name="validateSchemaVersion"
					defaultParameter="false" required="false" defaultValue="true"
					type="boolean" booleanEncoding="yesno">
					<description lang="en">
						<value>
							If yes is specified, the task will validate
							the current schema version before accessing
							the database.
						</value>
					</description>
				</parameter>
				<parameter name="allowIncorrectSchemaVersion"
					defaultParameter="false" required="false" defaultValue="true"
					type="boolean" booleanEncoding="yesno">
					<description lang="en">
						<value>
							If validateSchemaVersion is yes, this option
							controls the result of a schema version
							check failure. If this option is yes, a
							warning is displayed and execution
							continues. If this option is no, an error is
							displayed and the program aborts.
						</value>
					</description>
				</parameter>
				<parameter name="readAllUsers" defaultParameter="false"
					required="false" defaultValue="false" type="boolean"
					booleanEncoding="yesno">
					<description lang="en">
						<value>
							If set to yes, the user public edit flag
							will be ignored and user information will be
							attached to every entity.
						</value>
					</description>
				</parameter>
				<parameter name="directory" type="directory"
					defaultValue="replicate" required="true">
					<description lang="en">
						<value>The working directory.</value>
					</description>
				</parameter>
			</task>
		</function>

		<function id="read-replication-lag"
			friendlyName="Read replication-lag">
			<task name="read-replication-lag" shortName="rrl">
				<description lang="en">
					<value>
						This Task takes the state.txt in an replication
						working directory and compares its timestamp
						(that's the timestamp of the last chunk of that
						that osmosis downloaded) with the timestamp of
						the servers state.txt (that's the timestamp of
						the last chunk of that that the server has
						produced). It then calculates the difference and
						prints it to stdout. In order to get only the
						printed value its often useful to pipe the log
						messages on stderr to /dev/null.
					</value>
				</description>
				<parameter name="workingDirectory" type="directory"
					defaultParameter="true">
					<description lang="en">
						<value>
							The directory to populate with state and
							config files.
						</value>
					</description>
				</parameter>
				<parameter name="humanReadable" required="false"
					type="boolean" booleanEncoding="yesno" defaultValue="false">
					<description lang="en">
						<value>
							print the replication lag in a human
							readable format
						</value>
					</description>
				</parameter>
			</task>
		</function>
	</functionGroup>
</XMLOsmosisStructure>